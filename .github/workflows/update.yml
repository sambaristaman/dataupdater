name: Daily Game8 → Discord

on:
  schedule:
    # Runs at 08:00 America/Sao_Paulo daily.
    # GitHub cron is UTC; São Paulo is UTC-03 (no DST), so 11:00 UTC == 08:00 BRT.
    - cron: "0 12 * * *"
  workflow_dispatch:
    inputs:
      ONLY_KEY:
        description: "Run only for this key (e.g. genshin-impact). Leave blank for all."
        required: false
        default: ""
      FORCE_NEW:
        description: "Force posting new messages instead of editing."
        required: false
        type: boolean
        default: false
      DRY_RUN:
        description: "Do not send or write anything; log what would happen."
        required: false
        type: boolean
        default: false

permissions:
  contents: write   # allow pushing message_ids.json/state.json changes back

concurrency:
  group: game8-discord
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install -r requirements.txt
          else
            # Fallback if no requirements file is present
            pip install requests beautifulsoup4
          fi

      - name: Run scraper
        env:
          # Per-game webhooks
          WEBHOOK_URL_WUWA:    ${{ secrets.WEBHOOK_URL_WUWA }}
          WEBHOOK_URL_HSR:     ${{ secrets.WEBHOOK_URL_HSR }}
          WEBHOOK_URL_UMA:     ${{ secrets.WEBHOOK_URL_UMA }}
          WEBHOOK_URL_GI:      ${{ secrets.WEBHOOK_URL_GI }}
          # Summary webhook
          WEBHOOK_URL_SUMMARY: ${{ secrets.WEBHOOK_URL_SUMMARY }}
          # Role IDs for summary mentions (Discord roles)
          ROLE_ID_WUWA:        ${{ secrets.ROLE_ID_WUWA }}
          ROLE_ID_HSR:         ${{ secrets.ROLE_ID_HSR }}
          ROLE_ID_UMA:         ${{ secrets.ROLE_ID_UMA }}
          ROLE_ID_GI:          ${{ secrets.ROLE_ID_GI }}
          # Optional runtime flags
          ONLY_KEY:  ${{ github.event.inputs.ONLY_KEY }}
          FORCE_NEW: ${{ github.event.inputs.FORCE_NEW }}
          DRY_RUN:   ${{ github.event.inputs.DRY_RUN }}
        run: |
          set -euo pipefail
          python scraper.py

      - name: Commit and push state if changed
        if: ${{ github.event.inputs.DRY_RUN != 'true' }}  # don't commit during dry runs
        run: |
          set -euo pipefail

          # Show what changed
          git status --porcelain

          # Stage the state files (ok if they don't exist yet)
          git add -A -- message_ids.json state.json

          # Commit only if there is something staged
          if ! git diff --cached --quiet; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            # Create the commit first so the index is clean
            git commit -m "chore: update Discord message IDs and scrape state"

            # Rebase our commit onto the latest remote, then push
            git pull --rebase
            git push
          else
            echo "No changes to commit."
          fi
